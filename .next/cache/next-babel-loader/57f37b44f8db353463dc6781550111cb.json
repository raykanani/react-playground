{"ast":null,"code":"var _jsxFileName = \"/Users/raykanani/Documents/GitHub/react-playground/pages/posts/[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../../components/layout';\nimport { getAllPostIds, getPostData } from '../../lib/posts';\nimport Date from '../../components/date';\nimport Head from 'next/head';\nimport ReactPlayer from 'react-player';\nimport { getSortedPostsData } from '../lib/posts';\nimport utilStyles from '../../styles/utils.module.css';\nexport default function Post({\n  postData,\n  prevQuestion,\n  nextQuestion\n}) {\n  console.log(prevQuestion);\n  return __jsx(Layout, {\n    prevQuestion: prevQuestion,\n    nextQuestion: nextQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }\n  }, postData.title)), __jsx(\"article\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: utilStyles.questionHeader,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, __jsx(\"h1\", {\n    className: utilStyles.headingXl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, postData.title, __jsx(\"span\", {\n    className: `${utilStyles.lightText} ${utilStyles.date}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }\n  }, __jsx(Date, {\n    dateString: postData.date,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  })))), __jsx(\"div\", {\n    className: utilStyles.videoContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, postData.videoUrl && __jsx(ReactPlayer, {\n    url: postData.videoUrl,\n    height: 500,\n    width: 300,\n    playing: true,\n    config: {\n      youtube: {\n        playerVars: {\n          modestbranding: 1\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: postData.contentHtml\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  })));\n}\nexport async function getStaticPaths() {\n  const paths = getAllPostIds();\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  const allPostsData = getSortedPostsData();\n  const postData = await getPostData(params.id);\n  let postCache = {};\n  let isCurrentPost = false;\n  let nextQuestion, prevQuestion;\n  allPostsData.map(({\n    id,\n    date,\n    title\n  }) => {\n    if (isCurrentPost) {\n      nextQuestion = {\n        id,\n        title\n      };\n      return;\n    }\n\n    if (id === params.id) {\n      isCurrentPost = true;\n      prevQuestion = postCache;\n    }\n\n    postCache = {\n      id,\n      title\n    };\n  });\n  return {\n    props: {\n      postData,\n      nextQuestion,\n      prevQuestion\n    }\n  };\n}","map":{"version":3,"sources":["/Users/raykanani/Documents/GitHub/react-playground/pages/posts/[id].js"],"names":["Layout","getAllPostIds","getPostData","Date","Head","ReactPlayer","getSortedPostsData","utilStyles","Post","postData","prevQuestion","nextQuestion","console","log","title","questionHeader","headingXl","lightText","date","videoContainer","videoUrl","youtube","playerVars","modestbranding","__html","contentHtml","getStaticPaths","paths","fallback","getStaticProps","params","allPostsData","id","postCache","isCurrentPost","map","props"],"mappings":"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","sourcesContent":["import Layout from '../../components/layout'\nimport { getAllPostIds, getPostData } from '../../lib/posts'\nimport Date from '../../components/date'\nimport Head from 'next/head'\nimport ReactPlayer from 'react-player'\nimport { getSortedPostsData } from '../lib/posts'\n\n\nimport utilStyles from '../../styles/utils.module.css'\n\n\nexport default function Post({ postData, prevQuestion, nextQuestion }) {\n  console.log(prevQuestion);\n  return (\n    <Layout prevQuestion={prevQuestion} nextQuestion={nextQuestion}>\n      <Head>\n        <title>\n          {postData.title}\n        </title>\n      </Head>\n      <article>\n      <div className={utilStyles.questionHeader}>\n        <h1 className={utilStyles.headingXl}>\n          {postData.title}\n          <span className={`${utilStyles.lightText} ${utilStyles.date}`}>\n            <Date dateString={postData.date} />\n          </span>\n        </h1>\n      </div>\n      <div className={utilStyles.videoContainer}>\n          {postData.videoUrl && \n            <ReactPlayer \n              url={postData.videoUrl}\n              height={500}\n              width={300}\n              playing\n              config={{\n                youtube: {\n                  playerVars: { modestbranding: 1 }\n                }\n              }}\n            />\n          }\n        </div>\n        <div dangerouslySetInnerHTML={{ __html: postData.contentHtml }} />\n    </article>\n    </Layout>\n  )\n}\n\nexport async function getStaticPaths() {\n  const paths = getAllPostIds()\n  return {\n    paths,\n    fallback: false\n  }\n}\n\nexport async function getStaticProps( {params} ) {\n  const allPostsData = getSortedPostsData()\n  const postData = await getPostData(params.id)\n  let postCache = {};\n  let isCurrentPost = false;\n  let nextQuestion, prevQuestion;\n  allPostsData.map(({ id, date, title }) => {\n    if (isCurrentPost) {\n      nextQuestion = {\n        id,\n        title,\n      }\n      return;\n    }\n    if (id === params.id)  {\n      isCurrentPost = true;\n      prevQuestion = postCache\n    }\n    postCache = {\n      id,\n      title\n    }\n })\n  return {\n    props: {\n      postData,\n      nextQuestion,\n      prevQuestion\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}